name: Continous Test Workflow

on:
  pull_request:
    branches:
      - dev
      - main
  push:
    branches:
      - dev

env:
  NODE_ENV: test_github_actions
  MYSQL_ROOT_PASSWORD: password
  DD_CIVISIBILITY_AGENTLESS_ENABLED: ${{vars.DD_CIVISIBILITY_AGENTLESS_ENABLED}}
  AI_KEY: ${{secrets.AI_KEY}}
  AI_ORG: ${{secrets.AI_ORG}}
  AI_UUID: ${{secrets.AI_UUID}}
  HONEYBADGER_KEY: ${{secrets.HONEYBADGER_KEY}}
  CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}
  SENTRY_URL: ${{secrets.SENTRY_URL}}
  DD_API_KEY: ${{secrets.DD_API_KEY}}
  DD_SITE: ${{secrets.DD_SITE}}
  JWT_SECRET: ${{secrets.JWT_SECRET}}
  JWT_EXPIRES: ${{vars.JWT_EXPIRES}}
  JWT_COOKIE_EXPIRES_IN: ${{vars.JWT_COOKIE_EXPIRES_IN}}
  BCRYPT_STRING: ${{secrets.BCRYPT_STRING}}

jobs:
  Unit_Test:
    name: 'Node.js v${{ matrix.node }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node:
          - 16
    environment: dev
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          # MYSQL_DATABASE: test
        ports:
            - '8888:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Start Mysql Service
      run: |
        sudo /etc/init.d/mysql start
    - name: Import test data
      run: |
        mysql -h 127.0.0.1 --port 8888 -u root -ppassword < .github/workflows/travis.sql
      
    - name: Set up Redis
      run: sudo apt-get install redis-server
    - name: 'Install Node'
      uses: actions/setup-node@v3
      with:
        node-version: '${{ matrix.node }}'
        cache: 'npm'
    - name: Install mocha
      run: npm install -g mocha
    - name: 'Cache node_modules'
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-v${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
            ${{ runner.os }}-node-v${{ matrix.node }}-
    - name: Install dependencies
      run: |
        npm install
        npm install --save sequelize
        npm install --save mysql2

    - name: Run migrations
      run: npx sequelize db:migrate

    - name: Run  Tests
      run: |
        nohup npm run start &
        sleep 3
        npm run test
    - name: Install Postman CLI
      run: |
        curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    - name: Login to Postman CLI
      run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
    - name: Run API tests
      run: |
        postman collection run "${{ github.workspace }}/postman/collections/Noob Community.json" -e "23034417-16f64787-aeec-4958-872a-1df3aa0d8494"
  
    - name: Run coverage
      run: npm run coverage
  Postman_Test:
    runs-on: ubuntu-latest
    needs: setup
    environment: dev
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          # MYSQL_DATABASE: test
        ports:
            - '8888:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Start Mysql Service
      run: |
        sudo /etc/init.d/mysql start
    - name: Import test data
      run: |
        mysql -h 127.0.0.1 --port 8888 -u root -ppassword < .github/workflows/travis.sql
      
    - name: Set up Redis
      run: sudo apt-get install redis-server
    - name: 'Install Node'
      uses: actions/setup-node@v3
      with:
        node-version: '${{ matrix.node }}'
        cache: 'npm'
    - name: Install Postman CLI
      run: |
        curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    - name: Install dependencies
      run: |
        npm install
        npm install --save sequelize
        npm install --save mysql2

    - name: Run migrations
      run: npx sequelize db:migrate

    - name: Run  Tests
      run: |
        nohup npm run start &
        sleep 3
   
    - name: Login to Postman CLI
      run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
    - name: Run API tests
      run: |
        postman collection run "${{ github.workspace }}/postman/collections/Noob Community.json" -e "23034417-16f64787-aeec-4958-872a-1df3aa0d8494"
  

# ///