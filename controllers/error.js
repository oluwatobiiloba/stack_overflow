// import AppError class from app_error.js file located in /util directory
const AppError = require('./../util/app_error');

/**
 * A middleware function that handles CastError by creating a new error object using the imported AppError class
 * @function castError
 * @param {object} err
 * @returns {object} - an instance of AppError with a message and status code
 */
const castError = err => {
    console.log("in cast")
    const message = `Invalid ${err.path}: ${err.value}.`;
    return new AppError(message, 400);
};

/**
 * A middleware function that handles duplicate field errors by creating a new error object using the imported AppError class
 * @function duplicateFieldsDB
 * @param {object} err
 * @returns {object} - an instance of AppError with a message and status code
 */
const duplicateFieldsDB = err => {
    const value = err.errors[0].path;
    const message = `Duplicate field value: ${value}. Please use another value!`;
    return new AppError(message, 400);
};

/**
 * A middleware function that handles validation errors by creating a new error object using the imported AppError class
 * @function validationErrorDB
 * @param {object} err
 * @returns {object} - an instance of AppError with a message and status code
 */
const validationErrorDB = err => {
    console.log("in validation")
    const errors = Object.values(err.errors).map(el => el.message);

    const message = `Invalid input data. ${errors.join('. ')}`;
    return new AppError(message, 400);
};

/**
 * A middleware function that sends detailed error information in development environment
 * @function sendErrorDev
 * @param {object} req - request object
 * @param {object} err - error object generated by AppError instance
 * @param {object} res - response object
 * @returns {object} - JSON object with status code, status, error, message and stack trace
 */
const sendErrorDev = (req, err, res) => {
    if (req.originalUrl.startsWith('/api')) {
        res.status(err.statusCode).json({
            status: err.status,
            error: err,
            message: err.message,
            stack: err.stack
        });
    } else {
        res.status(err.statusCode).render('error', {
            title: 'Something went wrong',
            msg: err.message
        });
    }
};

/**
 * A middleware function that sends minimal error information in production environment
 * @function sendErrorProd
 * @param {object} _req - request object (not used)
 * @param {object} err - error object generated by AppError instance
 * @param {object} res - response object
 * @returns {object} - JSON object with status code, status, and message
 */
const sendErrorProd = (err, res) => {
    const { statusCode = 500, status = "error", message } = err;

    if (err.isOperational) {
        res.status(statusCode).json({
            status,
            message
        });
    } else {
        console.error('ERROR ðŸ’¥', err);
        res.status(statusCode).json({
            status,
            message: 'Something went very wrong!'
        });
    }
};

/**
 * Main error handling middleware function for the application.
 * It sets default values for status code and status on local error objects, checks environment of the process, creates a new modified error object based on specific types of errors, and invokes either sendErrorDev or sendErrorProd accordingly
 * @function exports
 * @param {object} err: The error object 
 * @param {object} req: The request object.
 * @param {object} res: The response object.
 * @returns {void}
 */
module.exports = (err, req, res) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV !== 'development') {
        sendErrorDev(req, err, res);
    } else {
        let error = { ...err };
        error.message = err.message;
        console.log(error.name)
        if (error.name === 'CastError') error = castError(error);
        if (error.name === "SequelizeUniqueConstraintError") error = duplicateFieldsDB(error);
        if (error.name === 'ValidationError') error = validationErrorDB(error);
        sendErrorProd(error, res);
    }
};
